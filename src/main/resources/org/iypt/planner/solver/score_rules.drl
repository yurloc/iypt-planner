package org.iypt.planner.solver;
    dialect "java"

import static java.lang.Math.abs;

import java.util.Collection;

import com.neovisionaries.i18n.CountryCode;
import org.iypt.planner.domain.Absence;
import org.iypt.planner.domain.Conflict;
import org.iypt.planner.domain.Group;
import org.iypt.planner.domain.IndependentRatio;
import org.iypt.planner.domain.Juror;
import org.iypt.planner.domain.JurorLoad;
import org.iypt.planner.domain.JurorType;
import org.iypt.planner.domain.Jury;
import org.iypt.planner.domain.Lock;
import org.iypt.planner.domain.NonVotingSeat;
import org.iypt.planner.domain.Round;
import org.iypt.planner.domain.Seat;
import org.iypt.planner.domain.Team;
import org.iypt.planner.domain.Tournament;
import org.iypt.planner.domain.Tournament.Statistics;
import org.iypt.planner.domain.VotingSeat;
import org.iypt.planner.solver.WeightConfig;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

global HardSoftScoreHolder scoreHolder;

// NOTE: remember, average calculation count per second should be definitely over 1000

// ############################################################################
// Hard constraints
// ############################################################################

rule "multipleSeatsInRound"
@ConstraintType(hard)
when
    $j  : Juror()
    $r  : Round()
    $s1 : Seat( juror == $j, jury.group.round == $r )
    $s2 : Seat( ( juror == $j && jury.group.round == $r )
                && ( jury.group.name > $s1.jury.group.name || position > $s1.position ) )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// No need to detect 'null' jurors. Planner does not insert uninitialized
// entities into working memory.
rule "emptySeat"
@ConstraintType(hard)
when
    $seat : VotingSeat( juror == Juror.NULL )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "invalidChair"
@ConstraintType(hard)
when
    $juror : Juror( !chairCandidate )
    $seat  : VotingSeat( chair, juror == $juror )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "teamAndJurorSameCountry"
@ConstraintType(hard)
when
    $seat : VotingSeat( $jury : jury, $juror : juror )
    $team : Team( $jury.group.teams contains this )
    $c    : Conflict( juror == $juror, country == $team.country )
    // or $jury.group.countries.contains($juror.country) ?
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "absentJuror"
@ConstraintType(hard)
when
    $r : Round()
    // TODO Seat( round == $r )
    $s : Seat( jury.group.round == $r, $juror : juror )
    $absence : Absence( juror == $juror, round == $r )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "brokenLock"
@ConstraintType(hard)
when
    $lock : Lock()
    Seat( jury == $lock.jury, position == $lock.position, $misfit : juror != $lock.juror )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "teamAndChairMeetOften"
@ConstraintType(hard)
when
    $juror : Juror( chairCandidate )
    $team  : Team()
    // collection of all chair seats occupied by $juror and judging $team
    $c     : Collection( size > 2 )
             from collect( VotingSeat( chair, juror == $juror, jury.group.teams contains $team ) )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Experienced jurors are only allowed to sit on voting seats, exp.j. on non-voting seat breaks HARD constraint
// TODO planner should not touch non-voting seats (besides construction phase)
rule "experiencedJurorOnNonVotingVotingSeat"
@ConstraintType(hard)
when
    $j : Juror( experienced )
    $s : NonVotingSeat( juror == $j )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "inexperiencedOnNonVotingVotingSeatNotInFirstRound"
@ConstraintType(hard)
when
    $juror : Juror( !experienced, $firstRound : firstAvailable )
    $seat  : NonVotingSeat( juror == $juror, jury.group.round.number != $firstRound )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "teamAndChairMeetTwice"
@ConstraintType(soft)
when
    $wc    : WeightConfig()
    $juror : Juror( chairCandidate )
    $team  : Team()
    // collection of all chair seats occupied by $juror and judging $team
    $c     : Collection( size == 2 )
             from collect( VotingSeat( chair, juror == $juror, jury.group.teams contains $team ) )
then
    scoreHolder.addSoftConstraintMatch(kcontext, -$wc.getWeight(drools.getRule().getName()));
end

rule "calculateJurorLoads"
salience 1 // calculate these facts before other rules
when
    $stats : Statistics()
    $juror : Juror()
    accumulate( VotingSeat( juror == $juror );
                $seats : count() )
    accumulate( Absence( juror == $juror );
                $absences: count() )
then
    JurorLoad load = new JurorLoad($juror, false, $seats, $stats.getRounds(), $absences, $stats.getOptimalLoad());
    insertLogical( load );
end

rule "loadDeltaExceeded"
@ConstraintType(soft)
enabled true
when
    $wc   : WeightConfig()
    $load : JurorLoad( !chair, excessive )
then
    int weight = -Double.valueOf($load.getCost() * $wc.getWeight(drools.getRule().getName()) + 0.5).intValue();
    scoreHolder.addSoftConstraintMatch(kcontext, weight);
end

rule "calculateChairLoads"
salience 1 // calculate these facts before other rules
when
    $stats : Statistics()
    $juror : Juror( chairCandidate )
    accumulate( VotingSeat( juror == $juror, chair == true );
                $seats : count() )
    accumulate( Absence( juror == $juror );
                $absences: count() )
then
    JurorLoad load = new JurorLoad($juror, true, $seats, $stats.getRounds(), $absences, $stats.getOptimalChairLoad());
    insertLogical( load );
end

rule "chairLoadDeltaExceeded"
@ConstraintType(soft)
enabled true
when
    $wc   : WeightConfig()
    $load : JurorLoad( chair, excessive )
then
    int weight = -Double.valueOf($load.getCost() * $wc.getWeight(drools.getRule().getName()) + 0.5).intValue();
    scoreHolder.addSoftConstraintMatch(kcontext, weight);
end

rule "teamAndJurorAlreadyMet"
@ConstraintType(soft)
when
    $wc    : WeightConfig()
    $juror : Juror()
    $team  : Team()
    // collection of all seats occupied by $juror and judging $team
    $seats : Collection( size > 1 )
             from collect( VotingSeat( juror == $juror, jury.group.teams contains $team ) )
then
    scoreHolder.addSoftConstraintMatch(kcontext, -1 * $seats.size() * $seats.size() * $wc.getWeight(drools.getRule().getName()));
end

rule "jurorAndJurorConflict"
@ConstraintType(soft)
when
    $wc : WeightConfig()
    // two jurors with the same country conflict
    $c1 : Conflict( $j1 : juror, $country : country )
    $c2 : Conflict( $j2 : juror, country == $country )
    // those two jurors meet in the same jury
    $s1 : VotingSeat( $jury : jury, juror == $j1 )
    $s2 : VotingSeat( jury == $jury, juror == $j2, position > $s1.position )
then
    scoreHolder.addSoftConstraintMatch(kcontext, -$wc.getWeight(drools.getRule().getName()));
end

rule "calculateIndependentRatio"
salience 1 // calculate these facts before other rules
when
    $jury : Jury()
    accumulate( VotingSeat( jury == $jury, juror != null, juror.type == JurorType.INDEPENDENT );
                $i : count() )
then
    insertLogical( new IndependentRatio($jury, $i) );
end

rule "independentRatioDeltaExceeded"
@ConstraintType(soft)
when
    $wc : WeightConfig()
    $i  : IndependentRatio( delta != 0 )
then
    scoreHolder.addSoftConstraintMatch(kcontext, -1 * $i.getDelta() * $i.getDelta() * $wc.getWeight(drools.getRule().getName()));
end

rule "accumulatedBias"
@ConstraintType(soft)
when
    $wc   : WeightConfig()
    $jury : Jury()
    accumulate( VotingSeat( jury == $jury, $juror : juror != null );
                $bias : sum( $juror.getBias() ) )
then
    scoreHolder.addSoftConstraintMatch(kcontext, -Math.round(abs($bias.floatValue() * $wc.getWeight(drools.getRule().getName()))));
end

rule "jurorMeetsBigGroupOften"
@ConstraintType(soft)
when
    $wc : WeightConfig()
    $j  : Juror()
    $c  : Collection( size > 1 )
              from collect( VotingSeat( juror == $j, jury.group.size == 4 ) )
then
    scoreHolder.addSoftConstraintMatch(kcontext, -($c.size() - 1) * $wc.getWeight(drools.getRule().getName()));
end

rule "inexperiencedJurorVoting"
@ConstraintType(soft)
when
    $wc    : WeightConfig()
    $juror : Juror( !experienced, $firstRound : firstAvailable )
    $seat  : VotingSeat( juror == $juror, jury.group.round.number == $firstRound )
then
    scoreHolder.addSoftConstraintMatch(kcontext, -$wc.getWeight(drools.getRule().getName()));
end

rule "inexperiencedJurorObserving"
@ConstraintType(soft)
when
    $juror : Juror( !experienced, $firstRound : firstAvailable )
    $round : Round( number == $firstRound )
    $seat  : NonVotingSeat( juror == $juror, jury.group.round == $round )
then
    scoreHolder.addSoftConstraintMatch(kcontext, 1);
end

// ############################################################################
// Change penalties
// ############################################################################

// TODO decide if this rule should detect swaps inside juries (I think "no", such moves should be filtered out)
rule "penalizeJurorChange"
@ConstraintType(soft)
when
    $wc : WeightConfig()
    $t  : Tournament() // original schedule
    $s2 : Seat( !chair, $jury := jury, $p := position )
    $s1 : Seat( !chair, $jury := jury, $p := position, juror != $s2.juror ) from $t.getSeats()
then
    scoreHolder.addSoftConstraintMatch(kcontext, -$wc.getWeight(drools.getRule().getName()));
end

rule "penalizeChairChange"
@ConstraintType(soft)
when
    $wc : WeightConfig()
    $t  : Tournament() // original schedule
    $s2 : Seat( position == 0, $jury := jury )
    $s1 : Seat( position == 0, $jury := jury, juror != $s2.juror ) from $t.getSeats()
then
    scoreHolder.addSoftConstraintMatch(kcontext, -$wc.getWeight(drools.getRule().getName()));
end

rule "penalizeJurorWithdraw"
@ConstraintType(soft)
when
    $wc : WeightConfig()
    $t  : Tournament() // original schedule
    $r  : Round()
    // note: do not penalize filling an empty seat!
    $s  : Seat( $juror := juror && $juror != null, jury.group.round == $r ) from $t.seats
    not( exists Seat( $juror := juror, jury.group.round == $r ) )
then
    scoreHolder.addSoftConstraintMatch(kcontext, -$wc.getWeight(drools.getRule().getName()));
end
