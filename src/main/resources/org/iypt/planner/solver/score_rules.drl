package org.iypt.core;
    dialect "java"

import java.util.Collection;

import org.drools.planner.core.score.buildin.hardandsoft.HardAndSoftScoreHolder;
import org.drools.planner.core.score.constraint.IntConstraintOccurrence;
import org.drools.planner.core.score.constraint.ConstraintType;

import org.iypt.planner.domain.Conflict;
import org.iypt.planner.domain.CountryCode;
import org.iypt.planner.domain.DayOff;
import org.iypt.planner.domain.Group;
import org.iypt.planner.domain.IndependentRatio;
import org.iypt.planner.domain.Juror;
import org.iypt.planner.domain.JurorLoad;
import org.iypt.planner.domain.JurorType;
import org.iypt.planner.domain.Jury;
import org.iypt.planner.domain.JurySeat;
import org.iypt.planner.domain.Round;
import org.iypt.planner.domain.Team;
import org.iypt.planner.domain.Tournament;
import org.iypt.planner.domain.Tournament.Statistics;
import org.iypt.planner.solver.WeightConfig;
import static java.lang.Math.abs;
import static java.lang.Math.round;

global HardAndSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "multipleSeatsInRound"
when
    $r : Round()
    $juror : Juror()
    $s1 : JurySeat( juror == $juror, jury.group.round == $r )
    $s2 : JurySeat( juror == $juror, jury.group.round == $r, this != $s1 )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $juror, $s1, $s2
    ));
end

rule "juryNotFull"
    enabled false // probably not needed
when
    $seat : JurySeat( juror == null, $jury : jury )
then
    System.out.println("juror missing");
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $seat
    ));
end

rule "invalidChair"
when
    $juror : Juror( !chairCandidate )
    $seat  : JurySeat( chair, juror == $juror )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $seat
    ));
end

rule "teamAndJurorSameCountry"
when
    $seat : JurySeat( $jury : jury, $juror : juror != null )
    $team : Team( $jury.group.teams contains this )
    $conflict : Conflict( juror == $juror, country == $team.country )
    // or $jury.group.countries.contains($juror.country) ?
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $seat, $team, $conflict
    ));
end

rule "dayOff"
when
    $r : Round( $day : day)
    $m : JurySeat( jury.group.round == $r, $juror : juror != null )
    $dayOff : DayOff( juror == $juror, day == $day )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $m, $dayOff
    ));
end

rule "teamAndChairMeetOften"
when
    $juror : Juror( chairCandidate )
    $team  : Team()
    // collection of all chair seats occupied by $juror and judging $team
    $c     : Collection( size > 2 )
             from collect( JurySeat( chair, juror == $juror, jury.group.teams contains $team ) )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $team, $c, $juror
    ));
end

rule "teamAndChairMeetTwice"
when
    $wc : WeightConfig()
    $juror : Juror( chairCandidate )
    $team  : Team()
    // collection of all chair seats occupied by $juror and judging $team
    $c     : Collection( size == 2 )
             from collect( JurySeat( chair, juror == $juror, jury.group.teams contains $team ) )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, $wc.getWeight(drools.getRule().getName()),
        $team, $c, $juror
    ));
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "calculateJurorLoads"
salience 1
when
    $stats : Statistics()
    $juror : Juror()
    accumulate( JurySeat( juror == $juror );
                $seats : count() )
    accumulate( DayOff( juror == $juror );
                $dayOffs : count() )
then
    JurorLoad load = new JurorLoad($juror, $seats, $stats.getRounds(), $dayOffs, $stats.getOptimalLoad());
    insertLogical( load );
end

rule "loadDeltaExceeded"
enabled true
when
    $wc : WeightConfig()
    $load : JurorLoad( excessive )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, Double.valueOf(abs($load.getDelta() * $wc.getWeight(drools.getRule().getName()) + 0.5)).intValue(),
        $load
    ));
end

rule "teamAndJurorAlreadyMet"
when
    $wc : WeightConfig()
    $juror : Juror()
    $team  : Team()
    // collection of all seats occupied by $juror and judging $team
    $seats : Collection( size > 1 )
             from collect( JurySeat( juror == $juror, jury.group.teams contains $team ) )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, $seats.size() * $seats.size() * $wc.getWeight(drools.getRule().getName()),
        $team, $seats, $juror
    ));
end

rule "jurorAndJurorConflict"
when
    $wc : WeightConfig()
    // two occupied seats in the same jury
    $s1 : JurySeat( $jury : jury, $j1 : juror != null )
    $s2 : JurySeat( jury == $jury, $j2 : juror != null, this != $s1 )
    // two conflicts of $j1 and $j2 with the same country
    $c1 : Conflict( juror == $j1, $country : country )
    $c2 : Conflict( juror == $j2, country == $country )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, $wc.getWeight(drools.getRule().getName()),
        $s1, $s2, $country
    ));
end

rule "calculateIndependentRatio"
when
    $jury : Jury()
    accumulate( JurySeat( jury == $jury, juror != null, juror.type == JurorType.INDEPENDENT );
                $i : count() )
then
    insertLogical( new IndependentRatio($jury, $i) );
end

rule "independentRatioDeltaExceeded"
when
    $wc : WeightConfig()
    $i : IndependentRatio( delta != 0 )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, $i.getDelta() * $i.getDelta() * $wc.getWeight(drools.getRule().getName()),
        $i
    ));
end

rule "accumulatedBias"
when
    $wc : WeightConfig()
    $jury : Jury()
    accumulate( JurySeat( jury == $jury, $juror : juror != null );
                $bias : sum( $juror.getBias() ) )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, round(abs($bias.floatValue() * $wc.getWeight(drools.getRule().getName()))),
        $jury, $bias
    ));
end

// ############################################################################
// Calculate score
// ############################################################################

// Accumulate hard constraints
rule "hardConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_HARD, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setHardConstraintsBroken($hardTotal.intValue());
end

// Accumulate soft constraints
rule "softConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $softTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_SOFT, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setSoftConstraintsBroken($softTotal.intValue());
end
