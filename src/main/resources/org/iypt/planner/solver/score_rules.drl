package org.iypt.core;
    dialect "java"

import java.util.Collection;

import org.drools.planner.core.score.buildin.hardandsoft.HardAndSoftScoreHolder;
import org.drools.planner.core.score.constraint.IntConstraintOccurrence;
import org.drools.planner.core.score.constraint.ConstraintType;

import com.neovisionaries.i18n.CountryCode;
import org.iypt.planner.domain.Conflict;
import org.iypt.planner.domain.DayOff;
import org.iypt.planner.domain.Group;
import org.iypt.planner.domain.IndependentRatio;
import org.iypt.planner.domain.Juror;
import org.iypt.planner.domain.JurorLoad;
import org.iypt.planner.domain.JurorType;
import org.iypt.planner.domain.Jury;
import org.iypt.planner.domain.Lock;
import org.iypt.planner.domain.Round;
import org.iypt.planner.domain.Seat;
import org.iypt.planner.domain.Team;
import org.iypt.planner.domain.Tournament;
import org.iypt.planner.domain.Tournament.Statistics;
import org.iypt.planner.solver.WeightConfig;
import static java.lang.Math.abs;
import static java.lang.Math.round;

global HardAndSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "multipleSeatsInRound"
@ConstraintType(hard)
when
    $r : Round()
    $juror : Juror()
    $s1 : Seat( juror == $juror, jury.group.round == $r )
    $s2 : Seat( juror == $juror, jury.group.round == $r, this != $s1 )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $juror, $s1, $s2
    ));
end

rule "emptySeat"
@ConstraintType(hard)
when
    $seat : Seat( juror == Juror.NULL )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $seat
    ));
end

rule "invalidChair"
@ConstraintType(hard)
when
    $juror : Juror( !chairCandidate )
    $seat  : Seat( chair, juror == $juror )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $seat
    ));
end

rule "teamAndJurorSameCountry"
@ConstraintType(hard)
when
    $seat : Seat( $jury : jury, $juror : juror )
    $team : Team( $jury.group.teams contains this )
    $conflict : Conflict( juror == $juror, country == $team.country )
    // or $jury.group.countries.contains($juror.country) ?
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $seat, $team, $conflict
    ));
end

rule "dayOff"
@ConstraintType(hard)
when
    $r : Round( $day : day)
    $m : Seat( jury.group.round == $r, $juror : juror )
    $dayOff : DayOff( juror == $juror, day == $day )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $m, $dayOff
    ));
end

rule "brokenLock"
@ConstraintType(hard)
when
    $lock : Lock()
    Seat( jury == $lock.jury, position == $lock.position, $misfit : juror != $lock.juror )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $lock, $misfit
    ));
end

rule "teamAndChairMeetOften"
@ConstraintType(hard)
when
    $juror : Juror( chairCandidate )
    $team  : Team()
    // collection of all chair seats occupied by $juror and judging $team
    $c     : Collection( size > 2 )
             from collect( Seat( chair, juror == $juror, jury.group.teams contains $team ) )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $team, $c, $juror
    ));
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "teamAndChairMeetTwice"
@ConstraintType(soft)
when
    $wc : WeightConfig()
    $juror : Juror( chairCandidate )
    $team  : Team()
    // collection of all chair seats occupied by $juror and judging $team
    $c     : Collection( size == 2 )
             from collect( Seat( chair, juror == $juror, jury.group.teams contains $team ) )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, $wc.getWeight(drools.getRule().getName()),
        $team, $c, $juror
    ));
end

rule "calculateJurorLoads"
salience 1
when
    $stats : Statistics()
    $juror : Juror()
    accumulate( Seat( juror == $juror );
                $seats : count() )
    accumulate( DayOff( juror == $juror );
                $dayOffs : count() )
then
    JurorLoad load = new JurorLoad($juror, $seats, $stats.getRounds(), $dayOffs, $stats.getOptimalLoad());
    insertLogical( load );
end

rule "loadDeltaExceeded"
@ConstraintType(soft)
enabled true
when
    $wc : WeightConfig()
    $load : JurorLoad( excessive )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, Double.valueOf(abs($load.getDelta() * $wc.getWeight(drools.getRule().getName()) + 0.5)).intValue(),
        $load
    ));
end

rule "teamAndJurorAlreadyMet"
@ConstraintType(soft)
when
    $wc : WeightConfig()
    $juror : Juror()
    $team  : Team()
    // collection of all seats occupied by $juror and judging $team
    $seats : Collection( size > 1 )
             from collect( Seat( juror == $juror, jury.group.teams contains $team ) )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, $seats.size() * $seats.size() * $wc.getWeight(drools.getRule().getName()),
        $team, $seats, $juror
    ));
end

rule "jurorAndJurorConflict"
@ConstraintType(soft)
when
    $wc : WeightConfig()
    // two jurors with the same country conflict
    $c1 : Conflict( $j1 : juror, $country : country )
    $c2 : Conflict( $j2 : juror, country == $country )
    // those two jurors meet in the same jury
    $s1 : Seat( $jury : jury, juror == $j1 )
    $s2 : Seat( jury == $jury, juror == $j2, this != $s1 )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, $wc.getWeight(drools.getRule().getName()),
        $s1, $s2, $country
    ));
end

rule "calculateIndependentRatio"
when
    $jury : Jury()
    accumulate( Seat( jury == $jury, juror != null, juror.type == JurorType.INDEPENDENT );
                $i : count() )
then
    insertLogical( new IndependentRatio($jury, $i) );
end

rule "independentRatioDeltaExceeded"
@ConstraintType(soft)
when
    $wc : WeightConfig()
    $i : IndependentRatio( delta != 0 )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, $i.getDelta() * $i.getDelta() * $wc.getWeight(drools.getRule().getName()),
        $i
    ));
end

rule "accumulatedBias"
@ConstraintType(soft)
when
    $wc : WeightConfig()
    $jury : Jury()
    accumulate( Seat( jury == $jury, $juror : juror != null );
                $bias : sum( $juror.getBias() ) )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, round(abs($bias.floatValue() * $wc.getWeight(drools.getRule().getName()))),
        $jury, $bias
    ));
end

// ############################################################################
// Change penalties
// ############################################################################

rule "penalizeChairChange"
@ConstraintType(soft)
when
     $t : Tournament()
    $s2 : Seat( position == 0, $jury := jury )
    $s1 : Seat( position == 0, $jury := jury, juror != $s2.juror ) from $t.getSeats()
    $wc : WeightConfig()
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, $wc.getWeight(drools.getRule().getName()),
        $s1, $s2
    ));
end

rule "penalizeJurorWithdraw"
@ConstraintType(soft)
when
    $t : Tournament()
    $s : Seat( $juror := juror ) from $t.Seats
    not( exists Seat( $juror := juror) )
    $wc : WeightConfig()
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_SOFT, $wc.getWeight(drools.getRule().getName()),
        $s
    ));
end

// ############################################################################
// Calculate score
// ############################################################################

// Accumulate hard constraints
rule "hardConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_HARD, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setHardConstraintsBroken($hardTotal.intValue());
end

// Accumulate soft constraints
rule "softConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $softTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_SOFT, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setSoftConstraintsBroken($softTotal.intValue());
end
