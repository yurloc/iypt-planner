package org.iypt.core;
    dialect "java"

import org.drools.planner.core.score.buildin.hardandsoft.HardAndSoftScoreHolder;
import org.drools.planner.core.score.constraint.IntConstraintOccurrence;
import org.drools.planner.core.score.constraint.ConstraintType;

import org.iypt.planner.domain.Conflict;
import org.iypt.planner.domain.CountryCode;
import org.iypt.planner.domain.DayOff;
import org.iypt.planner.domain.Group;
import org.iypt.planner.domain.Juror;
import org.iypt.planner.domain.Jury;
import org.iypt.planner.domain.JuryMembership;
import org.iypt.planner.domain.Round;
import org.iypt.planner.domain.Team;
import org.iypt.planner.domain.Tournament;

global HardAndSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "multipleMembershipsInRound"
when
    $r : Round()
    $juror : Juror()
    $m1 : JuryMembership( juror == $juror, jury.group.round == $r )
    $m2 : JuryMembership( juror == $juror, jury.group.round == $r, this != $m1 )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 10,
        $juror, $m1, $m2
    ));
end

rule "juryNotFull"
    enabled false // probably not needed
when
    $membership : JuryMembership( juror == null, $jury : jury )
then
    System.out.println("juror missing");
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $membership
    ));
end

rule "teamAndJurorSameCountry"
when
    $m : JuryMembership( $jury : jury, $juror : juror != null )
    $team : Team( country == $juror.country, $jury.group.teams contains this )
    // or $jury.group.countries.contains($juror.country) ?
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $m, $team
    ));
end

rule "dayOff"
when
    $r : Round( $day : day)
    $m : JuryMembership( jury.group.round == $r, $juror : juror != null )
    $dayOff : DayOff( juror == $juror, day == $day )
then
    insertLogical( new IntConstraintOccurrence(
        drools.getRule().getName(),
        ConstraintType.NEGATIVE_HARD, 1,
        $m, $dayOff
    ));
end

// ############################################################################
// Soft constraints
// ############################################################################

// TODO

// ############################################################################
// Calculate score
// ############################################################################

// Accumulate hard constraints
rule "hardConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_HARD, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setHardConstraintsBroken($hardTotal.intValue());
end

// Accumulate soft constraints
rule "softConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $softTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_SOFT, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setSoftConstraintsBroken($softTotal.intValue());
end
